// 本语言把换行默认为语句结束, 所以对 NEWLINE 的识别要小心.
file = { SOI
      ~ (
          fn_def
        | comment
        // TODO: 其他模块
        | NEWLINE
        )*
      ~ EOI
}

fn_def = {
     "fn"
   ~ fn_head
   ~ block
}
fn_head = {
     identifier_head
   ~ ( "()"
     | ( parameter_def?
       ~ ( (identifier_tails ~ parameter_def)*
         ~ (identifier_tails ~ "()")
         )
       )
     | ( parameter_def?
       ~ (identifier_tails ~ parameter_def)+
       )
     | parameter_def
     )
   ~ NEWLINE*
   ~ ("->" ~ identifier)?
}

parameter_def = {
     "("
   ~ identifier ~ (":" ~ identifier)
   ~ ("," ~ identifier ~ (":" ~ identifier))*
   ~ ")"
}

statement = {
     NEWLINE
   | comment
   | declaration
   | conditional
      /* | assignment | while_loop | conditional | (expr ~ semi) | comment   */
}

// 声明规则:
// 强制要求在声明变量时初始化.
// 可以省略类型, 让编译器自动推导, 但不能省略赋值.
// 不允许: let n: i32
declaration = {
     "let"
   ~ "mut"?
   ~ identifier ~ (":" ~ identifier)? ~ "=" ~ expr
   ~ end
}

// 表达式:
//
expr = {
     identifier
   | number
   | conditional
    /* bool_not | func_call | field_access | string_literal | bool_literal   */
}

// 条件语句
conditional = {
        "if" ~ "(" ~ expr ~ ")" ~ then? ~ block
      ~ ("else if" ~ "(" ~ expr ~ ")" ~ "then"? ~ block)*
      ~ ("else" ~ "then"? ~ block)?
   |    "if" ~ "{"
      ~ NEWLINE*
      ~ ("," ~ "(" ~ expr ~ ")" ~ "then"? ~ block ~ NEWLINE*)+ 
      ~ "}"
}
then = { line_terminator* ~ "then" }
    

/// TODO: 中文
// 标识符规则:
// 标识符由一个或者多个以空格分隔的词 组合而成: red apple , time 3, 小明的 书包.
// 组成词的 unicode字符 可以是: LETTER NUMBER 下划线"_".
//
// head 表示 第一个 词, head不能是关键字, 不能是纯数字.
// 错误例子: 123 个苹果, let james go. 123 是纯数字, let 是关键字.
// 正确例子: 1个苹果, let_james_go.
//
// tail 代表 head以外的其他词, tails 代表head以外的其他词连在一起.
// tail 没有 关键字 和 纯数字 的限制.
// 所以有合法例子: 跑 3 圏, jame let john go.
identifier = { identifier_head ~ identifier_tails? }
identifier_head = @{ !(keyword | (number ~ " ")) ~ identifier_char+ }
identifier_tail = @{ identifier_char+ }
identifier_tails = { identifier_tail+ }
identifier_char = _{ LETTER | NUMBER | "_" }

// 数字:
// 以0为开头的两个或者两们以上数字是不合法的.
// 错误例子: 001
number = @{ "0" | (nonzero ~ digit*) }
// 允许数字中有下划线: 1_223_223
digit = _{ "0" | nonzero | "_" }
nonzero = _{ '1'..'9' }

/// TODO: 整理关键字
keyword = @{
   "abstract" | "as" | "become" | "break" | "byte" | "class" | "clear" |
   "const" | "continue" | "do" | "else" | "enum" | "eval" | "export" |
   "extern" | "false" | "final" | "fn" | "for" | "if" | "impl" | "import" |
   "in" | "let" | "loop" | "match" | "mod" | "move" | "mut" | "of" |
   "out" | "pub" | "raw" | "ref" | "return" | "self" | "static" |
   "struct" | "super" | "trait" | "true" | "typeof" | "type" | "unsafe" |
   "use" | "where" | "while" | "yield"
}

alpha = _{ 'a'..'z' | 'A'..'Z' }
alphanumeric = _{ alpha | '0'..'9' }

// 行注释和块注释 都是以换行符结尾,
// 不允许这样:
// abc /* comment */ edf
// abc /* comment */
comment = { comment_line | comment_block }
comment_line = { "//" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
comment_block = { "/*" ~ (!("*/" ~ NEWLINE) ~ ANY)* ~ "*/" ~ NEWLINE }

// 考虑到行尾可以有注释, 所以把行注释归结为 line_terminator.
line_terminator = _{ NEWLINE | comment_line }

block = _{ line_terminator* ~ "{" ~ statement* ~ line_terminator* ~ "}" }
// curly brackets
lcb = { line_terminator* ~ "{" }
rcb = { line_terminator* ~ "}" }
// square brackets
lsb = { line_terminator* ~ "[" }
rsb = { line_terminator* ~ "]" }
// round brackets
lsb = { line_terminator* ~ "[" }
rsb = { line_terminator* ~ "]" }

// 非语句起始符:
// 不可能作为语句的开始符号的符号. 
//
// 如果这个符号是本行的第一个字符, 则可以肯定地判断此行不能单独成为一个语句,
// 而是需要和上一行相连才能成为一个完整的语句.
//
// 例子: then
// then 是不可能作为一个语句的开始的, 当then出现在行首时,
// 可以确定本行是上一行语句的延续.
//
// 反例1: if
// if 可以作为语句的开始符号, 同时
// 反例2: (
// 左圆括号是可以作为语句开始符的: (1 + 2). insert into (file)
// 但是也可以不作为语句开始符: let tupel = 
//                                (1, 2)
// 我的目的是要明确地在行首标明: 此行是语句的开始 还是上一行语句的延续.
// 所以上面正确的格式应该是: let tuple
//                                 = (1, 2)

// end 用于语句的结束.
// 本语言不强制用分号结束语句.
// 如果语句末尾有分号, 是合法的, 但是非语句末尾的分号是非法的.
// 合法: let n = 123;
// 非法: let l = [ abc
//               , def;
//               ]
end = _{ ";"? ~ line_terminator }

WHITESPACE = _{
     " "
   | "\t"
}
